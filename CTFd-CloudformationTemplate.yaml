
AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy CTFd in AWS using managed services

Parameters:

  pWAFArn:
    Type: String
    Description: Arn of the WAF to attach to the ALB
    Default: None

  # DNS & Hostname
  pPublicZoneId:
    Type: AWS::Route53::HostedZone::Id

  pPublicZoneHostname:
    Type: String

  pFlagBucket:
    Type: String

  #
  # Container Params
  #
  pServiceName:
    Type: String
    Default: "ctfd"
    Description: A name for the service

  pContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU

  pContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container

  pDesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run

  pImageVersion:
    Description: Version Identifer of Container to Deploy
    Type: String

  pCTFDSecretKey:
    Type: String
    NoEcho: true

  #
  # Redis Params
  #
  pCacheNodeType:
    Type: String
    Description: Instance size for Redis
    Default: cache.t3.micro  # Free Tier

  pNumCacheNodes:
    Type: String
    Description: Number of Redis Nodes to create


  #
  # Database
  #
  pDBInstanceClass:
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
    Default: db.t4g.micro  # Free Tier

  pDBStorageGB:
    Default: 20 # Free Tier
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
    ConstraintDescription: must be between 20 and 65536 GiB.

  pDBMasterPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.


  #
  # Networking Parameters
  #
  pVPCId:
    Type: AWS::EC2::VPC::Id

  pPublicSubnet1:
    Type: AWS::EC2::Subnet::Id

  pPublicSubnet2:
    Type: AWS::EC2::Subnet::Id

  pPrivateSubnet1:
    Type: AWS::EC2::Subnet::Id

  pPrivateSubnet2:
    Type: AWS::EC2::Subnet::Id

Conditions:
  cAttachWAF: !Not [ !Equals [ !Ref pWAFArn, "None" ] ]

Resources:

  APILoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Ref AWS::StackName
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref pPublicSubnet1
        - !Ref pPublicSubnet2
      Type: application
      # TODO
      # Access Loggings
      # Conditional WAF

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref pVPCId
      GroupDescription: !Sub "Generated by the ${AWS::StackName}"
      GroupName: !Sub "${AWS::StackName}-ALBSecurityGroup"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
          Description: "Added by Cloudformation at stack create"
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"
          Description: "Added by Cloudformation at stack create"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecurityGroup"

  ALBCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: DISABLED
      DomainName: !Ref pPublicZoneHostname
      DomainValidationOptions:
        - DomainName: !Ref pPublicZoneHostname
          HostedZoneId: !Ref pPublicZoneId
      ValidationMethod: DNS

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref ALBCertificate
      DefaultActions:
        # The Default Action is to forward everything to the ContainerTargetGroup
        - Type: forward
          TargetGroupArn: !Ref ContainerTargetGroup
      LoadBalancerArn: !Ref APILoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08

  PublicRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref pPublicZoneId
      Name: !Ref pPublicZoneHostname
      ResourceRecords:
        - !GetAtt APILoadBalancer.DNSName
      TTL: 60
      Type: CNAME

  WAFAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Condition: cAttachWAF
    Properties:
      ResourceArn: !Ref APILoadBalancer
      WebACLArn: !Ref pWAFArn

  ContainerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      TargetType: ip
      Name: !Ref pServiceName
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref pVPCId

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'pServiceName'
      Cpu: !Ref 'pContainerCpu'
      Memory: !Ref 'pContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ContainerRole
      RuntimePlatform:
        CpuArchitecture: ARM64
      ContainerDefinitions:
        - Name: !Ref 'pServiceName'
          Cpu: !Ref 'pContainerCpu'
          Memory: !Ref 'pContainerMemory'
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ctfd:${pImageVersion}"
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref 'pServiceName'
                awslogs-region: !Ref AWS::Region
                awslogs-create-group: true
                awslogs-stream-prefix: "ctfd"
          Environment:
            - Name: UPLOAD_FOLDER
              Value: "/var/uploads"
            - Name: DATABASE_URL
              Value: !Sub mysql+pymysql://ctfd:${pDBMasterPassword}@${Database.Endpoint.Address}/ctfd
            - Name: REDIS_URL
              Value: !Sub redis://${RedisCluster.RedisEndpoint.Address}:${RedisCluster.RedisEndpoint.Port}
            - Name: WORKERS
              Value: !Ref pDesiredCount
            - Name: LOG_FOLDER
              Value: "/var/log/CTFd"
            - Name: ACCESS_LOG
              Value: "-"
            - Name: ERROR_LOG
              Value: "-"
            - Name: REVERSE_PROXY
              Value: "true"
            - Name: SECRET_KEY
              Value: !Ref pCTFDSecretKey
            - Name: FLAG_BUCKET
              Value: !Ref pFlagBucket
          PortMappings:
            - ContainerPort: 8000

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListener
    Properties:
      ServiceName: !Ref pServiceName
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref pDesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref pPrivateSubnet1
            - !Ref pPrivateSubnet2
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref pServiceName
          ContainerPort: 8000
          TargetGroupArn: !Ref ContainerTargetGroup

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref pVPCId
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ALBSecurityGroup
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup

  ContainerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs.amazonaws.com
              - ecs-tasks.amazonaws.com
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
              # Allow the ECS tasks to upload logs to CloudWatch
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
              - 'logs:PutLogEvents'
            Resource: '*'
      - PolicyName: CTFdApplication
        PolicyDocument:
          Statement:
          - Sid: AllowS3
            Effect: Allow
            Action:
              - "s3:*"
            Resource: !Sub "arn:aws:s3:::${pFlagBucket}/*"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ecs-tasks.amazonaws.com
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:CreateLogGroup'
                - 'logs:PutLogEvents'
              Resource: '*'

  #
  # RDS
  #
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref pDBStorageGB
      AllowMajorVersionUpgrade: false
      # AssociatedRoles:
      #   - DBInstanceRole
      AutoMinorVersionUpgrade: true
      # AvailabilityZone: String
      BackupRetentionPeriod: 5
      # CACertificateIdentifier: String
      # CertificateDetails:
      #   CertificateDetails
      # CertificateRotationRestart: Boolean
      CopyTagsToSnapshot: true
      # DBClusterIdentifier: String
      # DBClusterSnapshotIdentifier: String
      DBInstanceClass: !Ref pDBInstanceClass
      DBInstanceIdentifier: ctfd-db
      DBName: ctfd
      # DBParameterGroupName: String
      DBSubnetGroupName: !Ref DatabaseDBSubnetGroup
      DeleteAutomatedBackups: false
      DeletionProtection: false
      EnableCloudwatchLogsExports:
        - audit
        - error
        - general
        - slowquery
      # EnableIAMDatabaseAuthentication: Boolean
      EnablePerformanceInsights: false
      # Endpoint:
      #   Address: !Ref pDBHostName
      #   HostedZoneId: !Ref pPublicZoneId
      #   Port: "3306"
      Engine: mariadb
      EngineVersion: "10.4.25"
      ManageMasterUserPassword: false
      MasterUsername: ctfd
      MasterUserPassword: !Ref pDBMasterPassword
      # MasterUserSecret:
      #   MasterUserSecret
      # MaxAllocatedStorage: Integer
      # MonitoringInterval: Integer
      # MonitoringRoleArn: String
      MultiAZ: false  # FIXME?
      # NetworkType: String
      # OptionGroupName: String
      # PerformanceInsightsKMSKeyId: String
      # PerformanceInsightsRetentionPeriod: Integer
      # Port: String
      # PreferredBackupWindow: String
      # PreferredMaintenanceWindow: String
      PubliclyAccessible: false
      StorageEncrypted: true
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref FargateContainerSecurityGroup

  DatabaseDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${AWS::StackName} Subnet Group
      # DBSubnetGroupName: String
      SubnetIds:
        - !Ref pPrivateSubnet1
        - !Ref pPrivateSubnet2

  #
  # Redis
  #
  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: true
      CacheNodeType: !Ref pCacheNodeType
      # CacheParameterGroupName: String
      # CacheSecurityGroupNames:
      #   - String
      CacheSubnetGroupName: !Ref RedisClusterSubnetGroup
      # ClusterName: "ctfd-redis-cluster"
      Engine: redis
      EngineVersion: "4.0.10"
      NetworkType: ipv4
      # NotificationTopicArn: String
      NumCacheNodes: !Ref pNumCacheNodes
      # Port: Integer
      # PreferredMaintenanceWindow: String
      # SnapshotArns:
      #   - String
      # SnapshotName: String
      SnapshotRetentionLimit: 5
      # SnapshotWindow: String
      VpcSecurityGroupIds:
        - !Ref FargateContainerSecurityGroup

  RedisClusterSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: "ctfd-redis-subnetgroup"
      Description: !Sub "Created by ${AWS::StackName}"
      SubnetIds:
        - !Ref pPrivateSubnet1
        - !Ref pPrivateSubnet2

  #
  # Dashboard
  #
  Dashboard:
    Type: "AWS::CloudWatch::Dashboard"
    Properties:
      DashboardName: !Ref AWS::StackName
      DashboardBody: !Sub |-
        {
            "widgets": [
                {
                    "height": 6,
                    "width": 24,
                    "y": 12,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "AWS/ApplicationELB", "RequestCountPerTarget", "TargetGroup", "${ContainerTargetGroup.TargetGroupFullName}" ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "us-east-1",
                        "period": 60,
                        "stat": "Sum",
                        "yAxis": {
                            "left": {
                                "label": "Requests",
                                "min": 0
                            }
                        }
                    }
                },
                {
                    "height": 6,
                    "width": 24,
                    "y": 24,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "AWS/ApplicationELB", "HTTPCode_Target_5XX_Count", "LoadBalancer", "${APILoadBalancer.LoadBalancerFullName}" ],
                            [ ".", "HTTPCode_Target_4XX_Count", ".", "${APILoadBalancer.LoadBalancerFullName}" ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "us-east-1",
                        "stat": "Sum",
                        "period": 60,
                        "title": "ALB TargetGroup Error Count"
                    }
                },
                {
                    "height": 6,
                    "width": 24,
                    "y": 6,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${APILoadBalancer.LoadBalancerFullName}" ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "us-east-1",
                        "stat": "Sum",
                        "period": 60,
                        "title": "API Request Count",
                        "yAxis": {
                            "left": {
                                "min": 0
                            }
                        }
                    }
                },
                {
                    "height": 6,
                    "width": 24,
                    "y": 18,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "AWS/ApplicationELB", "HTTPCode_ELB_4XX_Count", "LoadBalancer", "${APILoadBalancer.LoadBalancerFullName}" ],
                            [ ".", "HTTPCode_ELB_3XX_Count", ".", "." ],
                            [ ".", "HTTPCode_ELB_5XX_Count", ".", "." ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "us-east-1",
                        "stat": "Sum",
                        "period": 1,
                        "title": "ALB Errors"
                    }
                },
                {
                    "height": 6,
                    "width": 24,
                    "y": 30,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "AWS/ApplicationELB", "HealthyHostCount", "TargetGroup", "${ContainerTargetGroup.TargetGroupFullName}", "LoadBalancer", "${APILoadBalancer.LoadBalancerFullName}", { "label": "fooli-api-FIXME" } ]
                        ],
                        "period": 1,
                        "region": "us-east-1",
                        "stat": "Average",
                        "title": "Healthy Hosts",
                        "yAxis": {
                            "left": {
                                "min": 0
                            }
                        },
                        "timezone": "UTC",
                        "view": "timeSeries",
                        "stacked": false
                    }
                }
            ]
        }


Outputs:

  StackName:
    Value: !Ref 'AWS::StackName'

  ALBDNSName:
    Value: !GetAtt APILoadBalancer.DNSName

  APIDNSName:
    Value: !Sub "https://${pPublicZoneHostname}"



  DBEndpoint:
    Value: !GetAtt Database.Endpoint.Address